.header{
  background: url(../img/decor/bkg-welcome.png) 50% 100% / cover no-repeat;
}
.header__top{
  padding: 19px;
}
.header__top-inner {
  display: flex;
  justify-content: space-between;
  /* 1.Вот тут мы откинули лого от навигации */
  align-items: end;
  /* 3.Это, чтобы элементы не прилипали к потолку */
}
.header__logo{
  min-width: 174px;
  z-index: 11;
}
.header__logo img{
  width: 100%;
  /* Чтобы картинка внутри ссылки на всю ширину растянулась */
}
.nav__list {
  display: flex;
  /* 2.А тут откинули элементы внутри навигации друг от друга */
  gap: 4vh 40px;
  /* 40рх-это расстояние между словами в горизонтали, 4vh-это расстония по вертикали */
}
.nav__link {
  display: block;
  padding: 5px 0;
  /* 5.Это мы сделали, чтобы область нажатия ссылки была больше */
  position: relative;
  /* Это, чтобы кружочку было на что упираться */
  z-index: 1;
}
.nav__link::before{
  content: ' ';
  position: absolute;
  /* Это мы его натягиваем, вырывая из потока */
  top: -8px;
  left: -13px;
  z-index: -1;
  /* Это его позиционирование, в самом углу и сзади */
  height: 34px;
  width: 34px;
  background: var(--accent-color);
  border-radius: 50%;
  /* Это его внешний вид */
  opacity: 0;
  /* Это, чтобы элемент не было видно */
  transition: all .4s;
}
.nav__link:hover::before{
  opacity: 1;
  /* Это, чтобы элемент БЫЛО видно, но при наведении */
}
/* ===========================Hero================================== */
.hero {
  padding: 50px 0 140px;
}
.hero__inner {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  /* 1.Тут мы откинули текст от изображения */
  gap: 30px;
  /* Это для того, чтобы при уменьшее экрана они друг к другу не прилипли */
}
.hero__content {
  max-width: 520px;
}
.hero__info {
  line-height: 1.6;
  text-transform: uppercase;
  color: #b197b2;
  margin-bottom: 20px;

  display: flex;
  flex-wrap: wrap;
  /* 5.Это мы сделали, чтобы блочные элементы внутри
  hero__info выстроились в одну строку, а именно Старт 26.06.2025 */
}
.hero__info span{
  display: flex;
  align-items: center;
  /* 4.Чтобы информация и точки были по центру */
}
.hero__info span::after{
  content: '';
  background: #b197b2;
  border-radius: 50%;
  width: 4px;
  height: 4px;
  margin: 0 10px;
  /* 2.Это мы добавили круглишки после текста, 
  исключаю последнее слово, чтобы если что-то еще 
  появилось в этом тексте оно тоже отделилось точкой */
  display: block;
  /* 3.Свойство display: block нужно прописывать для псевдоэлементов,
  чтобы установить размеры и отобразить их как блоки. По умолчанию 
  псевдоэлементы являются строчными, и для них нельзя задать 
  ширину и высоту.  */
}
.hero__info span:last-child:after {
  content: none;
}
.hero__title {
  margin-bottom: 20px;
}
.hero__text {
  max-width: 360px;
  margin: 20px 0 40px 0;
}
.hero__img {
  position: relative;
  margin-right: 247px;
}
.hero__img>img {
  width: 100%;
  /* Дочерний э. первого порядка, тоесть контроллер мы не трогаем */
}
/* Если такое заранее прописать, то изображение, при уменьшении
экрана будет уменьшаться вслед за hero__img в котором оно лежит */
.hero__img-control {
  position: absolute;
  bottom: 11%;
  left: calc(100% - 39px);
  /* Это, чтобы натянуть кнопку на изображение */
  display: flex;
  align-items: center;
  gap: 10px;
  /* Это, чтобы спозиционировать их правильно */
  max-width: 200px;
  text-align: left;
}
.hero__img-control--mobile{
  display: none;
}
.hero__img-button {
  display: flex;
  justify-content: center;
  align-items: center;
  /* Потому что а (ссылка) это строчный элемент, а флекс блочный */
  flex-shrink: 0;
  /* Чтобы элемент при сжимании не становился меньше */
  width: 78px;
  height: 78px;
  border-radius: 50%;
  background: var(--accent-bg);
  box-shadow: 0 4px 20px 0 rgba(184, 148, 126, 0.3);

  position: relative;
}
.hero__img-button img{
  padding-left: 8.8%;
}
.hero__img-button::before{
  content: '';
  position: absolute;
  border: 1px solid var(--accent-color);
  border-radius: 50%;

  inset: 5px;
  /* Это top, left, right, bottom - в одном свойстве */
  opacity: 0;
  transition: all .4s;
}
.hero__img-button:hover:before{
  opacity: 1;
}
/* ======================Media for header-burger-open==================== */
.burger-icon {
  display: none;
/* 1.Это, чтобы не было видно этого меню при большой ширине */
  width: 50px;
  height: 50px;
/* 2.Это область кликабельности, его не видно */
  align-items: center;
  justify-content: center;
  z-index: 11;
}
.burger-icon span{
  display: block;
  width: 30px;
  height: 3px;
  border-radius: 100px;
  background: var(--accent-color);
  /* 3.Это область, которую видит пользователь, средняя полоска, типо котлета */
  position: relative;
  transition: all .4s;
}
.burger-icon span::after,
.burger-icon span::before{
  content: '';
  display: block;
  width: 30px;
  height: 3px;
  border-radius: 100px;
  background: var(--accent-color);
  /* 4.Это область которую пользователь видит, и это верх. и ниж. полоски, типо булки */
  position: absolute;
  /* 5.Будем булки перемешать относильно котлеты. */
  transition: all .4s;
}
.burger-icon span::after{
  bottom: 7px;
}
.burger-icon span::before{
  top: 7px;
}
/* ======================Media for header-burger-close==================== */

.body--opened-menu .burger-icon span{
  background: transparent;
}
.body--opened-menu .burger-icon span::after{
  bottom: 0px;
  transform: rotate(45deg);
}
.body--opened-menu .burger-icon span::before{
  top: 0px;
  transform: rotate(-45deg);
}
/*При появлении модификатора .body--opened-menu 
мы скрываем колету, ведь меню открыто,
а булки поворачиваем и превращаем в крестик. */